/* [wxMaxima batch file version 1] [ DO NOT EDIT BY HAND! ]*/
/* [ Created with wxMaxima version 22.04.0 ] */
/* [wxMaxima: input   start ] */
/* Date: Sun Aug 10 17:34:13 WEST 2008 */
/* Contributor: Volker van Nek */
/* Description: Code for gaussian elimination */
gaussian_elimination (A) := block( [i, j, m, n, maxi, listarith:true],
   m:length(args(A)), 
   n:length(A[1])-1,
   
   i:1, 
   j:1,
  while (i<=m and j<=n) do (
      maxi:i,
      for k:i+1 thru m do
         if abs(A[k,j]) > abs(A[maxi,j]) then
            maxi:k,

      if A[maxi,j]#0 then (
         [A[i],A[maxi]]: [A[maxi],A[i]],
      
         A[i]: A[i]/A[i,j],
      
         for u:i+1 thru m do
            A[u]: A[u] - A[u,j] * A[i],

         i: i+1 ),
      j: j+1 ),
   A )$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* Date: Wed Nov 18 11:20:39 WET 2009 */
/* Contributor: Stefano Ferri */
/* Description: Tries to handle submatrices */
subm ( _m, _rows, _cols ) := block(
    [i,j,_x],
    if not matrixp(_m) then error("First input must be a matrix"),
    if not listp(_rows) and not integerp(_rows) then error("Second input must be a list of rows or a single integer"),
    if not listp(_cols) and not integerp(_cols) then error("Third input must be a list of columns or a single integer"),
    if not listp(_rows) and integerp(_rows) then _rows : [_rows],
    if not listp(_cols) and integerp(_cols) then _cols : [_cols],
    for i in _rows do if not integerp(i) or i<=0 then error("Elements in rows list must be integers > 0"),
    for i in _cols do if not integerp(i) or i<=0 then error("Elements in columns list must be integers > 0"),
    for i in _rows do if i>matrix_size(_m)[1] then error("Row indices must be less or equal than the total number of rows"),
    for i in _cols do if i>matrix_size(_m)[2] then error("Column indices must be less or equal than the total number of columns"),
    _rows : sort(unique(_rows)),
    _cols : sort(unique(_cols)),
    return(genmatrix(lambda([i,j],_m[_rows[i],_cols[j]]),length(_rows),length(_cols)))
)$
/* [wxMaxima: input   end   ] */


/* [wxMaxima: input   start ] */
/* Date: Sat Dec 21 06:35:10 WET 2013 */
/* Contributor: Mike Valenzuela */
/* Description: Tries to return the power of a matrix */
/* Known issues: Yes */
matrix_power(A, t):=block(
    [A_, A_list, B_, B_list, eqs, eigvals, i, j, k,numeq, tt, solvedeq, offset],
    /* Initialize Variables */
    /* This is the value we set t to this value */
    offset: 1,
    /* The number of equations */
    numeq: length(A),
    /* The list of relevant variables */
    eqs: makelist(0,i,1,numeq),
    A_list: makelist( A_^^(i+offset)=tt,i,0,numeq-1),
    B_list: makelist( B_[i],i,1,numeq),
    
    /* Exact Eigenvalues and calculate powers of A */
    eigvals:(radcan(fullratsimp(eivals(A)))),
    for i:1 thru numeq do block(
        [],
        A_list[i]: at( A_list[i], tt=A^^(i+offset-1))
    ),
    A_list : reverse(A_list),
    
    /* Setup the first equation */
    k:1,
    eqs[1]: 0,
    for i:1 thru length(eigvals[1]) do block(
        [],
        for j:1 thru eigvals[2][i] do block (
            [],
            eqs[1]: eqs[1] + B_list[k] * t^(j-1) * eigvals[1][i]^t,
            k:k+1
        )
    ),
    eqs[1]: A_^^t = eqs[1],
    
    /* Generate all the necessary equations */
    for i:2 thru numeq do block(
        [],
        eqs[i]: at(eqs[i-1], [t=1+tt]),
        eqs[i]: at(eqs[i], [tt=t])
    ),
    
    /* Set t=offset and solve the equations */
    solvedeq: linsolve( at(eqs, t=offset), B_list ),
    
    /* Substitute the symbolic A_^k with the calculation */
    solvedeq: factorsum(radcan(at( solvedeq, A_list))),
    
    /* Substitute the resulting equations into eq0 */
    return( rhs(at(eqs[1], solvedeq ) ) )
)$
/* [wxMaxima: input   end   ] */



/* Old versions of Maxima abort on loading files that end in a comment. */
"Created with wxMaxima 22.04.0"$
